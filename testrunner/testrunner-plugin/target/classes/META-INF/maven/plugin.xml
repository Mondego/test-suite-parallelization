<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.5 on 2020-09-29 -->

<plugin>
  <name>testrunner-plugin</name>
  <description>A fast and efficient Parallel Test Runner</description>
  <groupId>com.mondego.ics.uci</groupId>
  <artifactId>testrunner-plugin</artifactId>
  <version>1.0.2-SNAPSHOT</version>
  <goalPrefix>tldr</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>diff</goal>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>uci.ics.mondego.testrunner.plugin.DiffMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.
&lt;br&gt;
&lt;br&gt;
Since the Version 2.17 using an alternate syntax for {@code argLine}, &lt;b&gt;@{...}&lt;/b&gt; allows late replacement
of properties when the plugin is executed, so properties that have been modified by other plugins will be picked
up correctly.
See the Frequently Asked Questions page with more details:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&lt;/a&gt;
&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via
System.getProperty(&quot;basedir&quot;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated
classloader. Only used when forking ({@code forkMode} is not {@code none}).&lt;br&gt;
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the
Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test
classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format
&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by
org.apache.maven.artifact.Artifact. This includes the following:
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;compile&lt;/i&gt; - system, provided, compile
&lt;li&gt;&lt;i&gt;runtime&lt;/i&gt; - compile, runtime
&lt;li&gt;&lt;i&gt;compile+runtime&lt;/i&gt; - system, provided, compile, runtime
&lt;li&gt;&lt;i&gt;runtime+system&lt;/i&gt; - system, compile, runtime
&lt;li&gt;&lt;i&gt;test&lt;/i&gt; - system, provided, compile, runtime, test
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>commit_hash</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Hash code of a commit. This is needed to generate report for each 
sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>commit_serial</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Serial number of a sampled commit. This is needed to generate
report for each sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &quot;true&quot;, the process will suspend and wait for a debugger to attach
on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure
arbitrary debuggability options (without overwriting the other options specified through the {@code argLine}
parameter).</description>
        </parameter>
        <parameter>
          <name>debug_flag</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for debug print statements. For debugging purpose turn this flag ON.</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run.
The child elements of this element must be &amp;lt;dependency&amp;gt; elements, and the
contents of each of these elements must be a string which follows the format:

&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set
this flag to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups
specified in this list will specifically not be run.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider.&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;exclude&amp;gt; elements specifying the tests (by pattern) that should be excluded in testing. When not
specified and when the {@code test} parameter is not specified, the default excludes will be &lt;br&gt;
&lt;pre&gt;&lt;code&gt;
{@literal &lt;excludes&gt;}
    {@literal &lt;exclude&gt;}**{@literal /}*$*{@literal &lt;/exclude&gt;}
{@literal &lt;/excludes&gt;}
&lt;/code&gt;&lt;/pre&gt;
(which excludes all inner classes).
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.
&lt;br&gt;
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;exclude&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;
{@literal &lt;exclude&gt;}%regex[pkg.*Slow.*.class], Unstable*{@literal &lt;/exclude&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property &lt;code&gt;${project.build.testOutputDirectory}&lt;/code&gt;, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If {@code excludes} are
also specified, these patterns are appended. Example with path, simple and regex excludes:&lt;br&gt;
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}DontRunTest.*
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to
&quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if there are no tests to run. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &quot;C&quot;,
the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with
&quot;C&quot;. If set to &quot;0&quot;, no VM is forked and all tests are executed within the main process.&lt;br&gt;
&lt;br&gt;
Example values: &quot;1.5C&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
The system properties and the {@code argLine} of the forked processes may contain the place holder string
&lt;code&gt;${surefire.forkNumber}&lt;/code&gt;, which is replaced with a fixed number for each of the parallel forks,
ranging from &lt;b&gt;1&lt;/b&gt; to the effective value of {@code forkCount} times the maximum number of parallel
Surefire executions in maven parallel builds, i.e. the effective value of the &lt;b&gt;-T&lt;/b&gt; command line
argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;strong&gt;DEPRECATED&lt;/strong&gt; since version 2.14. Use {@code forkCount} and {@code reuseForks} instead.
&lt;br&gt;
&lt;br&gt;
Option to specify the forking mode. Can be {@code never}, {@code once}, {@code always}, {@code perthread}.&lt;br&gt;
The {@code none} and {@code pertest} are also accepted for backwards compatibility.&lt;br&gt;
The {@code always} forks for each test-class.&lt;br&gt;
The {@code perthread} creates the number of parallel forks specified by {@code threadCount}, where each forked
JVM is executing one test-class. See also the parameter {@code reuseForks} for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>fork_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed.
If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated
by {@code System.exit()}. Use this parameter in order to determine the timeout of terminating the process.
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&quot;&gt;see the documentation:
http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&lt;/a&gt;
Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never
timing out.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one
of the groups specified here will be included in test run, if specified.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;include&amp;gt; elements specifying the tests (by pattern) that should be included in testing. When not
specified and when the {@code test} parameter is not specified, the default includes will be
&lt;pre&gt;&lt;code&gt;
{@literal &lt;includes&gt;}
    {@literal &lt;include&gt;}**{@literal /}Test*.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Test.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Tests.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*TestCase.java{@literal &lt;/include&gt;}
{@literal &lt;/includes&gt;}
&lt;/code&gt;&lt;/pre&gt;
Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;include&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], Basic????, !Unstable*{@literal &lt;/include&gt;}
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg{@literal /}**{@literal /}*Fast*.java{@literal &lt;/include&gt;}
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property {@code ${project.build.testOutputDirectory}}, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If {@code includes} are
also specified, these patterns are appended. Example with path, simple and regex includes:
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, {@code junit:junit} will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the
jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from
MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>true</required>
          <editable>false</editable>
          <description>ArtifactRepository of the localRepository. To obtain the directory of localRepository in unit tests use
System.getProperty(&quot;localRepository&quot;).</description>
        </parameter>
        <parameter>
          <name>log_directory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to write Logs to a particular directory.</description>
        </parameter>
        <parameter>
          <name>multi_module_project_name</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the project. This is needed particularly for multi module projects as it is difficult to
figure out which project is the parent project.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter {@code parallel}, TestNG will try to run all your test methods
in separate threads, except for methods that depend on each other, which will be run in the same thread in order
to respect their order of execution.
&lt;br&gt;
(JUnit 4.7 provider) Supports values {@code classes}, {@code methods}, {@code both} to run
in separate threads been controlled by {@code threadCount}.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), the value {@code both} is &lt;strong&gt;DEPRECATED&lt;/strong&gt;.
Use {@code classesAndMethods} instead.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), additional vales are available:
&lt;br&gt;
{@code suites}, {@code suitesAndClasses}, {@code suitesAndMethods}, {@code classesAndMethods}, {@code all}.</description>
        </parameter>
        <parameter>
          <name>parallelMavenExecution</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and
average number of methods per class if set to &lt;strong&gt;true&lt;/strong&gt;.
&lt;br&gt;
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests
and {@code interrupt} currently running tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods
are per cpu core.</description>
        </parameter>
        <parameter>
          <name>pluginArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of plugin artifacts.</description>
        </parameter>
        <parameter>
          <name>pluginDescriptor</name>
          <type>org.apache.maven.plugin.descriptor.PluginDescriptor</type>
          <since>2.12</since>
          <required>false</required>
          <editable>false</editable>
          <description>Information about this plugin, mainly used to lookup this plugin&apos;s configuration from the currently executing
project.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>projectArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of project artifacts.</description>
        </parameter>
        <parameter>
          <name>projectBuildDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Build directory of the project upon which the plugin is invoked</description>
        </parameter>
        <parameter>
          <name>projectBuildDirectory</name>
          <type>java.io.File</type>
          <since>2.20</since>
          <required>false</required>
          <editable>false</editable>
          <description>Read-only parameter with value of Maven property &lt;i&gt;project.build.directory&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of
configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to redirect the unit test standard output to a file (found in
reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &quot;brief&quot; or &quot;plain&quot;.
Only applies to the output format of the output files  (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml,
testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt.
File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos;
and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers)
The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after
they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &quot;flake&quot;.
However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &quot;false&quot;, a new VM is forked for each test class to be executed.
If set to &quot;true&quot;, up to {@code forkCount} VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are {@code alphabetical},
{@code reversealphabetical}, {@code random}, {@code hourly} (alphabetical on even hours, reverse alphabetical
on odd hours), {@code failedfirst}, {@code balanced} and {@code filesystem}.
&lt;br&gt;
&lt;br&gt;
Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a
multi-module build.
&lt;br&gt;
&lt;br&gt;
Failed first will run tests that failed on previous run first, as well as new tests for this run.
&lt;br&gt;
&lt;br&gt;
Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the
overall execution time. Initially a statistics file is created and every next test run will reorder classes.
&lt;br&gt;
&lt;br&gt;
Note that the statistics are stored in a file named &lt;b&gt;.surefire-XXXXXXXXX&lt;/b&gt; beside &lt;i&gt;pom.xml&lt;/i&gt; and
should not be checked into version control. The &quot;XXXXX&quot; is the SHA1 checksum of the entire surefire
configuration, so different configurations will have different statistics files, meaning if you change any
configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending &lt;i&gt;SIGTERM signal (CTRL+C)&lt;/i&gt;, &lt;i&gt;SHUTDOWN command&lt;/i&gt; is
received by every forked JVM.
&lt;br&gt;
By default ({@code shutdown=testset}) forked JVM would not continue with new test which means that
the current test may still continue to run.
&lt;br&gt;
The parameter can be configured with other two values {@code exit} and {@code kill}.
&lt;br&gt;
Using {@code exit} forked JVM executes {@code System.exit(1)} after the plugin process has received
&lt;i&gt;SIGTERM signal&lt;/i&gt;.
&lt;br&gt;
Using {@code kill} the JVM executes {@code Runtime.halt(1)} and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using
the &quot;maven.test.skip&quot; property, because maven.test.skip disables both running the tests and compiling the tests.
Consider using the {@code skipTests} parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests.
Due to race conditions in parallel/forked execution this may not be fully guaranteed.&lt;br&gt;
Enable with system property {@code -Dsurefire.skipAfterFailureCount=1} or any number greater than zero.
Defaults to &quot;0&quot;.&lt;br&gt;
See the prerequisites and limitations in documentation:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like {@code skipTests}, but bound to the old property &quot;maven.test.skip.exec&quot;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite
convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &amp;lt;suiteXmlFile&amp;gt; elements specifying TestNG suite xml file locations. Note that
{@code suiteXmlFiles} is incompatible with several other parameters of this plugin, like
{@code includes} and {@code excludes}.&lt;br&gt;
This parameter is ignored if the {@code test} parameter is specified (allowing you to run a single test
instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory containing internal Surefire temporary files.
&lt;br&gt;
The &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory is &lt;i&gt;project.build.directory&lt;/i&gt; on most platforms or
&lt;i&gt;system default temporary-directory&lt;/i&gt; specified by the system property {@code java.io.tmpdir}
on Windows (see &lt;a href=&quot;https://issues.apache.org/jira/browse/SUREFIRE-1400&quot;&gt;SUREFIRE-1400&lt;/a&gt;).
&lt;br&gt;
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter {@code includes} and
{@code excludes}. Each pattern you specify here will be used to create an include pattern formatted like
&lt;code&gt;**{@literal /}${test}.java&lt;/code&gt;, so you can just type {@code -Dtest=MyTest} to run a single test called
&quot;foo/MyTest.java&quot;. The test patterns prefixed with a &lt;em&gt;!&lt;/em&gt; will be excluded.
&lt;br&gt;
This parameter overrides the parameter {@code includes}, {@code excludes}, and the TestNG parameter
{@code suiteXmlFiles}.
&lt;br&gt;
Since 2.7.3, you can execute a limited number of methods in the test by adding &lt;i&gt;#myMethod&lt;/i&gt; or
&lt;i&gt;#my*ethod&lt;/i&gt;. For example, {@code -Dtest=MyTest#myMethod}. This is supported for junit 4.x and TestNg.&lt;br&gt;
&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=???Test, !Unstable*, pkg{@literal /}**{@literal /}Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&quot;&lt;/code&gt;&lt;/pre&gt;
or e.g.
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
The Parameterized JUnit runner {@code describes} test methods using an index in brackets, so the non-regex
method pattern would become: {@code #testMethod[*]}.
If using &lt;code&gt;@Parameters(name=&quot;{index}: fib({0})={1}&quot;)&lt;/code&gt; and selecting the index e.g. 5 in pattern, the
non-regex method pattern would become {@code #testMethod[5:*]}.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the
beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on
occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, {@code org.testng:testng} will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be
allocated for this execution. Only makes sense to use in conjunction with the {@code parallel} parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent classes if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited classes concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     2:&lt;b&gt;3&lt;/b&gt;:5, there is 30% of {@code threadCount} in concurrent classes.&lt;/li&gt;
 &lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=suitesAndClasses},
 {@code threadCount=16}, {@code threadCountSuites=5}, {@code threadCountClasses} is unspecified leaf, the number
 of concurrent classes is varying from &amp;gt;= 11 to 14 or 15. The {@code threadCountSuites} become
 given number of threads.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
&lt;ul&gt;
&lt;li&gt;number of concurrent methods if {@code threadCount} is 0 or unspecified&lt;/li&gt;
&lt;li&gt;limited concurrency of methods if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
concurrency is computed from ratio. For instance parallel=all and the ratio between
{@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is 2:3:&lt;b&gt;5&lt;/b&gt;,
there is 50% of {@code threadCount} which appears in concurrent methods.&lt;/li&gt;
&lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=all},
{@code threadCount=16}, {@code threadCountSuites=2}, {@code threadCountClasses=3}, but {@code threadCountMethods}
is unspecified leaf, the number of concurrent methods is varying from &amp;gt;= 11 to 14 or 15.
The {@code threadCountSuites} and {@code threadCountClasses} become given number of threads.&lt;/li&gt;
&lt;/ul&gt;
Only makes sense to use in conjunction with the {@code parallel} parameter. The default value &lt;b&gt;0&lt;/b&gt;
behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent suites if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited suites concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     &lt;b&gt;2&lt;/b&gt;:3:5, there is 20% of {@code threadCount} which appeared in concurrent suites.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>thread_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &quot;false&quot; to force it to
launch your tests with a plain old Java classpath. (See the
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&lt;/a&gt;
for a more detailed explanation of manifest-only JARs and their benefits.)
&lt;br&gt;
Beware, setting this to &quot;false&quot; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking.
Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s
ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The {@code parallel} parameter and
the actual number of classes/methods will decide. Setting this to &quot;true&quot; effectively disables
{@code perCoreThreadCount} and {@code threadCount}. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <commit_hash implementation="java.lang.String" default-value="0000F">${commit.hash}</commit_hash>
        <commit_serial implementation="java.lang.String" default-value="-1">${commit.serial}</commit_serial>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <debug_flag implementation="java.lang.String" default-value="false">${debug.flag}</debug_flag>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <fork_count implementation="java.lang.String" default-value="1">${fork.count}</fork_count>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository" default-value="${localRepository}"/>
        <log_directory implementation="java.lang.String" default-value="XXXX">${log.directory}</log_directory>
        <multi_module_project_name implementation="java.lang.String" default-value="XXX">${multimodule.projectname}</multi_module_project_name>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelMavenExecution implementation="java.lang.Boolean" default-value="${session.parallel}"/>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <pluginArtifactMap implementation="java.util.Map">${plugin.artifactMap}</pluginArtifactMap>
        <pluginDescriptor implementation="org.apache.maven.plugin.descriptor.PluginDescriptor" default-value="${plugin}"/>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <projectArtifactMap implementation="java.util.Map">${project.artifactMap}</projectArtifactMap>
        <projectBuildDir implementation="java.lang.String" default-value="${project.build.directory}"/>
        <projectBuildDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <thread_count implementation="java.lang.String" default-value="8">${thread.count}</thread_count>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
          <field-name>metadataSource</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>failrun</goal>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>uci.ics.mondego.testrunner.plugin.FailRunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.
&lt;br&gt;
&lt;br&gt;
Since the Version 2.17 using an alternate syntax for {@code argLine}, &lt;b&gt;@{...}&lt;/b&gt; allows late replacement
of properties when the plugin is executed, so properties that have been modified by other plugins will be picked
up correctly.
See the Frequently Asked Questions page with more details:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&lt;/a&gt;
&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via
System.getProperty(&quot;basedir&quot;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated
classloader. Only used when forking ({@code forkMode} is not {@code none}).&lt;br&gt;
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the
Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test
classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format
&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by
org.apache.maven.artifact.Artifact. This includes the following:
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;compile&lt;/i&gt; - system, provided, compile
&lt;li&gt;&lt;i&gt;runtime&lt;/i&gt; - compile, runtime
&lt;li&gt;&lt;i&gt;compile+runtime&lt;/i&gt; - system, provided, compile, runtime
&lt;li&gt;&lt;i&gt;runtime+system&lt;/i&gt; - system, compile, runtime
&lt;li&gt;&lt;i&gt;test&lt;/i&gt; - system, provided, compile, runtime, test
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>commit_hash</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Hash code of a commit. This is needed to generate report for each 
sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>commit_serial</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Serial number of a sampled commit. This is needed to generate
report for each sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &quot;true&quot;, the process will suspend and wait for a debugger to attach
on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure
arbitrary debuggability options (without overwriting the other options specified through the {@code argLine}
parameter).</description>
        </parameter>
        <parameter>
          <name>debug_flag</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for debug print statements. For debugging purpose turn this flag ON.</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run.
The child elements of this element must be &amp;lt;dependency&amp;gt; elements, and the
contents of each of these elements must be a string which follows the format:

&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set
this flag to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups
specified in this list will specifically not be run.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider.&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;exclude&amp;gt; elements specifying the tests (by pattern) that should be excluded in testing. When not
specified and when the {@code test} parameter is not specified, the default excludes will be &lt;br&gt;
&lt;pre&gt;&lt;code&gt;
{@literal &lt;excludes&gt;}
    {@literal &lt;exclude&gt;}**{@literal /}*$*{@literal &lt;/exclude&gt;}
{@literal &lt;/excludes&gt;}
&lt;/code&gt;&lt;/pre&gt;
(which excludes all inner classes).
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.
&lt;br&gt;
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;exclude&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;
{@literal &lt;exclude&gt;}%regex[pkg.*Slow.*.class], Unstable*{@literal &lt;/exclude&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property &lt;code&gt;${project.build.testOutputDirectory}&lt;/code&gt;, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If {@code excludes} are
also specified, these patterns are appended. Example with path, simple and regex excludes:&lt;br&gt;
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}DontRunTest.*
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to
&quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if there are no tests to run. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &quot;C&quot;,
the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with
&quot;C&quot;. If set to &quot;0&quot;, no VM is forked and all tests are executed within the main process.&lt;br&gt;
&lt;br&gt;
Example values: &quot;1.5C&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
The system properties and the {@code argLine} of the forked processes may contain the place holder string
&lt;code&gt;${surefire.forkNumber}&lt;/code&gt;, which is replaced with a fixed number for each of the parallel forks,
ranging from &lt;b&gt;1&lt;/b&gt; to the effective value of {@code forkCount} times the maximum number of parallel
Surefire executions in maven parallel builds, i.e. the effective value of the &lt;b&gt;-T&lt;/b&gt; command line
argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;strong&gt;DEPRECATED&lt;/strong&gt; since version 2.14. Use {@code forkCount} and {@code reuseForks} instead.
&lt;br&gt;
&lt;br&gt;
Option to specify the forking mode. Can be {@code never}, {@code once}, {@code always}, {@code perthread}.&lt;br&gt;
The {@code none} and {@code pertest} are also accepted for backwards compatibility.&lt;br&gt;
The {@code always} forks for each test-class.&lt;br&gt;
The {@code perthread} creates the number of parallel forks specified by {@code threadCount}, where each forked
JVM is executing one test-class. See also the parameter {@code reuseForks} for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>fork_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed.
If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated
by {@code System.exit()}. Use this parameter in order to determine the timeout of terminating the process.
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&quot;&gt;see the documentation:
http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&lt;/a&gt;
Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never
timing out.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one
of the groups specified here will be included in test run, if specified.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;include&amp;gt; elements specifying the tests (by pattern) that should be included in testing. When not
specified and when the {@code test} parameter is not specified, the default includes will be
&lt;pre&gt;&lt;code&gt;
{@literal &lt;includes&gt;}
    {@literal &lt;include&gt;}**{@literal /}Test*.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Test.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Tests.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*TestCase.java{@literal &lt;/include&gt;}
{@literal &lt;/includes&gt;}
&lt;/code&gt;&lt;/pre&gt;
Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;include&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], Basic????, !Unstable*{@literal &lt;/include&gt;}
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg{@literal /}**{@literal /}*Fast*.java{@literal &lt;/include&gt;}
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property {@code ${project.build.testOutputDirectory}}, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If {@code includes} are
also specified, these patterns are appended. Example with path, simple and regex includes:
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, {@code junit:junit} will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the
jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from
MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>true</required>
          <editable>false</editable>
          <description>ArtifactRepository of the localRepository. To obtain the directory of localRepository in unit tests use
System.getProperty(&quot;localRepository&quot;).</description>
        </parameter>
        <parameter>
          <name>log_directory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to write Logs to a particular directory.</description>
        </parameter>
        <parameter>
          <name>multi_module_project_name</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the project. This is needed particularly for multi module projects as it is difficult to
figure out which project is the parent project.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter {@code parallel}, TestNG will try to run all your test methods
in separate threads, except for methods that depend on each other, which will be run in the same thread in order
to respect their order of execution.
&lt;br&gt;
(JUnit 4.7 provider) Supports values {@code classes}, {@code methods}, {@code both} to run
in separate threads been controlled by {@code threadCount}.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), the value {@code both} is &lt;strong&gt;DEPRECATED&lt;/strong&gt;.
Use {@code classesAndMethods} instead.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), additional vales are available:
&lt;br&gt;
{@code suites}, {@code suitesAndClasses}, {@code suitesAndMethods}, {@code classesAndMethods}, {@code all}.</description>
        </parameter>
        <parameter>
          <name>parallelMavenExecution</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and
average number of methods per class if set to &lt;strong&gt;true&lt;/strong&gt;.
&lt;br&gt;
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests
and {@code interrupt} currently running tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods
are per cpu core.</description>
        </parameter>
        <parameter>
          <name>pluginArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of plugin artifacts.</description>
        </parameter>
        <parameter>
          <name>pluginDescriptor</name>
          <type>org.apache.maven.plugin.descriptor.PluginDescriptor</type>
          <since>2.12</since>
          <required>false</required>
          <editable>false</editable>
          <description>Information about this plugin, mainly used to lookup this plugin&apos;s configuration from the currently executing
project.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>projectArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of project artifacts.</description>
        </parameter>
        <parameter>
          <name>projectBuildDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Build directory of the project upon which the plugin is invoked</description>
        </parameter>
        <parameter>
          <name>projectBuildDirectory</name>
          <type>java.io.File</type>
          <since>2.20</since>
          <required>false</required>
          <editable>false</editable>
          <description>Read-only parameter with value of Maven property &lt;i&gt;project.build.directory&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of
configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to redirect the unit test standard output to a file (found in
reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &quot;brief&quot; or &quot;plain&quot;.
Only applies to the output format of the output files  (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml,
testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt.
File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos;
and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers)
The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after
they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &quot;flake&quot;.
However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &quot;false&quot;, a new VM is forked for each test class to be executed.
If set to &quot;true&quot;, up to {@code forkCount} VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are {@code alphabetical},
{@code reversealphabetical}, {@code random}, {@code hourly} (alphabetical on even hours, reverse alphabetical
on odd hours), {@code failedfirst}, {@code balanced} and {@code filesystem}.
&lt;br&gt;
&lt;br&gt;
Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a
multi-module build.
&lt;br&gt;
&lt;br&gt;
Failed first will run tests that failed on previous run first, as well as new tests for this run.
&lt;br&gt;
&lt;br&gt;
Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the
overall execution time. Initially a statistics file is created and every next test run will reorder classes.
&lt;br&gt;
&lt;br&gt;
Note that the statistics are stored in a file named &lt;b&gt;.surefire-XXXXXXXXX&lt;/b&gt; beside &lt;i&gt;pom.xml&lt;/i&gt; and
should not be checked into version control. The &quot;XXXXX&quot; is the SHA1 checksum of the entire surefire
configuration, so different configurations will have different statistics files, meaning if you change any
configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending &lt;i&gt;SIGTERM signal (CTRL+C)&lt;/i&gt;, &lt;i&gt;SHUTDOWN command&lt;/i&gt; is
received by every forked JVM.
&lt;br&gt;
By default ({@code shutdown=testset}) forked JVM would not continue with new test which means that
the current test may still continue to run.
&lt;br&gt;
The parameter can be configured with other two values {@code exit} and {@code kill}.
&lt;br&gt;
Using {@code exit} forked JVM executes {@code System.exit(1)} after the plugin process has received
&lt;i&gt;SIGTERM signal&lt;/i&gt;.
&lt;br&gt;
Using {@code kill} the JVM executes {@code Runtime.halt(1)} and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using
the &quot;maven.test.skip&quot; property, because maven.test.skip disables both running the tests and compiling the tests.
Consider using the {@code skipTests} parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests.
Due to race conditions in parallel/forked execution this may not be fully guaranteed.&lt;br&gt;
Enable with system property {@code -Dsurefire.skipAfterFailureCount=1} or any number greater than zero.
Defaults to &quot;0&quot;.&lt;br&gt;
See the prerequisites and limitations in documentation:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like {@code skipTests}, but bound to the old property &quot;maven.test.skip.exec&quot;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite
convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &amp;lt;suiteXmlFile&amp;gt; elements specifying TestNG suite xml file locations. Note that
{@code suiteXmlFiles} is incompatible with several other parameters of this plugin, like
{@code includes} and {@code excludes}.&lt;br&gt;
This parameter is ignored if the {@code test} parameter is specified (allowing you to run a single test
instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory containing internal Surefire temporary files.
&lt;br&gt;
The &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory is &lt;i&gt;project.build.directory&lt;/i&gt; on most platforms or
&lt;i&gt;system default temporary-directory&lt;/i&gt; specified by the system property {@code java.io.tmpdir}
on Windows (see &lt;a href=&quot;https://issues.apache.org/jira/browse/SUREFIRE-1400&quot;&gt;SUREFIRE-1400&lt;/a&gt;).
&lt;br&gt;
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter {@code includes} and
{@code excludes}. Each pattern you specify here will be used to create an include pattern formatted like
&lt;code&gt;**{@literal /}${test}.java&lt;/code&gt;, so you can just type {@code -Dtest=MyTest} to run a single test called
&quot;foo/MyTest.java&quot;. The test patterns prefixed with a &lt;em&gt;!&lt;/em&gt; will be excluded.
&lt;br&gt;
This parameter overrides the parameter {@code includes}, {@code excludes}, and the TestNG parameter
{@code suiteXmlFiles}.
&lt;br&gt;
Since 2.7.3, you can execute a limited number of methods in the test by adding &lt;i&gt;#myMethod&lt;/i&gt; or
&lt;i&gt;#my*ethod&lt;/i&gt;. For example, {@code -Dtest=MyTest#myMethod}. This is supported for junit 4.x and TestNg.&lt;br&gt;
&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=???Test, !Unstable*, pkg{@literal /}**{@literal /}Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&quot;&lt;/code&gt;&lt;/pre&gt;
or e.g.
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
The Parameterized JUnit runner {@code describes} test methods using an index in brackets, so the non-regex
method pattern would become: {@code #testMethod[*]}.
If using &lt;code&gt;@Parameters(name=&quot;{index}: fib({0})={1}&quot;)&lt;/code&gt; and selecting the index e.g. 5 in pattern, the
non-regex method pattern would become {@code #testMethod[5:*]}.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the
beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on
occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, {@code org.testng:testng} will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be
allocated for this execution. Only makes sense to use in conjunction with the {@code parallel} parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent classes if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited classes concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     2:&lt;b&gt;3&lt;/b&gt;:5, there is 30% of {@code threadCount} in concurrent classes.&lt;/li&gt;
 &lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=suitesAndClasses},
 {@code threadCount=16}, {@code threadCountSuites=5}, {@code threadCountClasses} is unspecified leaf, the number
 of concurrent classes is varying from &amp;gt;= 11 to 14 or 15. The {@code threadCountSuites} become
 given number of threads.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
&lt;ul&gt;
&lt;li&gt;number of concurrent methods if {@code threadCount} is 0 or unspecified&lt;/li&gt;
&lt;li&gt;limited concurrency of methods if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
concurrency is computed from ratio. For instance parallel=all and the ratio between
{@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is 2:3:&lt;b&gt;5&lt;/b&gt;,
there is 50% of {@code threadCount} which appears in concurrent methods.&lt;/li&gt;
&lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=all},
{@code threadCount=16}, {@code threadCountSuites=2}, {@code threadCountClasses=3}, but {@code threadCountMethods}
is unspecified leaf, the number of concurrent methods is varying from &amp;gt;= 11 to 14 or 15.
The {@code threadCountSuites} and {@code threadCountClasses} become given number of threads.&lt;/li&gt;
&lt;/ul&gt;
Only makes sense to use in conjunction with the {@code parallel} parameter. The default value &lt;b&gt;0&lt;/b&gt;
behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent suites if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited suites concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     &lt;b&gt;2&lt;/b&gt;:3:5, there is 20% of {@code threadCount} which appeared in concurrent suites.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>thread_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &quot;false&quot; to force it to
launch your tests with a plain old Java classpath. (See the
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&lt;/a&gt;
for a more detailed explanation of manifest-only JARs and their benefits.)
&lt;br&gt;
Beware, setting this to &quot;false&quot; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking.
Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s
ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The {@code parallel} parameter and
the actual number of classes/methods will decide. Setting this to &quot;true&quot; effectively disables
{@code perCoreThreadCount} and {@code threadCount}. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <commit_hash implementation="java.lang.String" default-value="0000F">${commit.hash}</commit_hash>
        <commit_serial implementation="java.lang.String" default-value="-1">${commit.serial}</commit_serial>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <debug_flag implementation="java.lang.String" default-value="false">${debug.flag}</debug_flag>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <fork_count implementation="java.lang.String" default-value="1">${fork.count}</fork_count>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository" default-value="${localRepository}"/>
        <log_directory implementation="java.lang.String" default-value="XXXX">${log.directory}</log_directory>
        <multi_module_project_name implementation="java.lang.String" default-value="XXX">${multimodule.projectname}</multi_module_project_name>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelMavenExecution implementation="java.lang.Boolean" default-value="${session.parallel}"/>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <pluginArtifactMap implementation="java.util.Map">${plugin.artifactMap}</pluginArtifactMap>
        <pluginDescriptor implementation="org.apache.maven.plugin.descriptor.PluginDescriptor" default-value="${plugin}"/>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <projectArtifactMap implementation="java.util.Map">${project.artifactMap}</projectArtifactMap>
        <projectBuildDir implementation="java.lang.String" default-value="${project.build.directory}"/>
        <projectBuildDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <thread_count implementation="java.lang.String" default-value="8">${thread.count}</thread_count>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
          <field-name>metadataSource</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>run</goal>
      <description>Mojo to run TLDR</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test-compile</executePhase>
      <implementation>uci.ics.mondego.testrunner.plugin.RunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.
&lt;br&gt;
&lt;br&gt;
Since the Version 2.17 using an alternate syntax for {@code argLine}, &lt;b&gt;@{...}&lt;/b&gt; allows late replacement
of properties when the plugin is executed, so properties that have been modified by other plugins will be picked
up correctly.
See the Frequently Asked Questions page with more details:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&lt;/a&gt;
&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via
System.getProperty(&quot;basedir&quot;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated
classloader. Only used when forking ({@code forkMode} is not {@code none}).&lt;br&gt;
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the
Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test
classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format
&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by
org.apache.maven.artifact.Artifact. This includes the following:
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;compile&lt;/i&gt; - system, provided, compile
&lt;li&gt;&lt;i&gt;runtime&lt;/i&gt; - compile, runtime
&lt;li&gt;&lt;i&gt;compile+runtime&lt;/i&gt; - system, provided, compile, runtime
&lt;li&gt;&lt;i&gt;runtime+system&lt;/i&gt; - system, compile, runtime
&lt;li&gt;&lt;i&gt;test&lt;/i&gt; - system, provided, compile, runtime, test
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>commit_hash</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Hash code of a commit. This is needed to generate report for each 
sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>commit_serial</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Serial number of a sampled commit. This is needed to generate
report for each sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &quot;true&quot;, the process will suspend and wait for a debugger to attach
on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure
arbitrary debuggability options (without overwriting the other options specified through the {@code argLine}
parameter).</description>
        </parameter>
        <parameter>
          <name>debug_flag</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for debug print statements. For debugging purpose turn this flag ON.</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run.
The child elements of this element must be &amp;lt;dependency&amp;gt; elements, and the
contents of each of these elements must be a string which follows the format:

&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set
this flag to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups
specified in this list will specifically not be run.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider.&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;exclude&amp;gt; elements specifying the tests (by pattern) that should be excluded in testing. When not
specified and when the {@code test} parameter is not specified, the default excludes will be &lt;br&gt;
&lt;pre&gt;&lt;code&gt;
{@literal &lt;excludes&gt;}
    {@literal &lt;exclude&gt;}**{@literal /}*$*{@literal &lt;/exclude&gt;}
{@literal &lt;/excludes&gt;}
&lt;/code&gt;&lt;/pre&gt;
(which excludes all inner classes).
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.
&lt;br&gt;
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;exclude&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;
{@literal &lt;exclude&gt;}%regex[pkg.*Slow.*.class], Unstable*{@literal &lt;/exclude&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property &lt;code&gt;${project.build.testOutputDirectory}&lt;/code&gt;, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If {@code excludes} are
also specified, these patterns are appended. Example with path, simple and regex excludes:&lt;br&gt;
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}DontRunTest.*
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to
&quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if there are no tests to run. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &quot;C&quot;,
the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with
&quot;C&quot;. If set to &quot;0&quot;, no VM is forked and all tests are executed within the main process.&lt;br&gt;
&lt;br&gt;
Example values: &quot;1.5C&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
The system properties and the {@code argLine} of the forked processes may contain the place holder string
&lt;code&gt;${surefire.forkNumber}&lt;/code&gt;, which is replaced with a fixed number for each of the parallel forks,
ranging from &lt;b&gt;1&lt;/b&gt; to the effective value of {@code forkCount} times the maximum number of parallel
Surefire executions in maven parallel builds, i.e. the effective value of the &lt;b&gt;-T&lt;/b&gt; command line
argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;strong&gt;DEPRECATED&lt;/strong&gt; since version 2.14. Use {@code forkCount} and {@code reuseForks} instead.
&lt;br&gt;
&lt;br&gt;
Option to specify the forking mode. Can be {@code never}, {@code once}, {@code always}, {@code perthread}.&lt;br&gt;
The {@code none} and {@code pertest} are also accepted for backwards compatibility.&lt;br&gt;
The {@code always} forks for each test-class.&lt;br&gt;
The {@code perthread} creates the number of parallel forks specified by {@code threadCount}, where each forked
JVM is executing one test-class. See also the parameter {@code reuseForks} for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>fork_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed.
If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated
by {@code System.exit()}. Use this parameter in order to determine the timeout of terminating the process.
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&quot;&gt;see the documentation:
http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&lt;/a&gt;
Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never
timing out.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one
of the groups specified here will be included in test run, if specified.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;include&amp;gt; elements specifying the tests (by pattern) that should be included in testing. When not
specified and when the {@code test} parameter is not specified, the default includes will be
&lt;pre&gt;&lt;code&gt;
{@literal &lt;includes&gt;}
    {@literal &lt;include&gt;}**{@literal /}Test*.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Test.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Tests.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*TestCase.java{@literal &lt;/include&gt;}
{@literal &lt;/includes&gt;}
&lt;/code&gt;&lt;/pre&gt;
Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;include&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], Basic????, !Unstable*{@literal &lt;/include&gt;}
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg{@literal /}**{@literal /}*Fast*.java{@literal &lt;/include&gt;}
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property {@code ${project.build.testOutputDirectory}}, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If {@code includes} are
also specified, these patterns are appended. Example with path, simple and regex includes:
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, {@code junit:junit} will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the
jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from
MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>true</required>
          <editable>false</editable>
          <description>ArtifactRepository of the localRepository. To obtain the directory of localRepository in unit tests use
System.getProperty(&quot;localRepository&quot;).</description>
        </parameter>
        <parameter>
          <name>log_directory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to write Logs to a particular directory.</description>
        </parameter>
        <parameter>
          <name>multi_module_project_name</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the project. This is needed particularly for multi module projects as it is difficult to
figure out which project is the parent project.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter {@code parallel}, TestNG will try to run all your test methods
in separate threads, except for methods that depend on each other, which will be run in the same thread in order
to respect their order of execution.
&lt;br&gt;
(JUnit 4.7 provider) Supports values {@code classes}, {@code methods}, {@code both} to run
in separate threads been controlled by {@code threadCount}.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), the value {@code both} is &lt;strong&gt;DEPRECATED&lt;/strong&gt;.
Use {@code classesAndMethods} instead.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), additional vales are available:
&lt;br&gt;
{@code suites}, {@code suitesAndClasses}, {@code suitesAndMethods}, {@code classesAndMethods}, {@code all}.</description>
        </parameter>
        <parameter>
          <name>parallelMavenExecution</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and
average number of methods per class if set to &lt;strong&gt;true&lt;/strong&gt;.
&lt;br&gt;
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests
and {@code interrupt} currently running tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods
are per cpu core.</description>
        </parameter>
        <parameter>
          <name>pluginArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of plugin artifacts.</description>
        </parameter>
        <parameter>
          <name>pluginDescriptor</name>
          <type>org.apache.maven.plugin.descriptor.PluginDescriptor</type>
          <since>2.12</since>
          <required>false</required>
          <editable>false</editable>
          <description>Information about this plugin, mainly used to lookup this plugin&apos;s configuration from the currently executing
project.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>projectArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of project artifacts.</description>
        </parameter>
        <parameter>
          <name>projectBuildDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Build directory of the project upon which the plugin is invoked</description>
        </parameter>
        <parameter>
          <name>projectBuildDirectory</name>
          <type>java.io.File</type>
          <since>2.20</since>
          <required>false</required>
          <editable>false</editable>
          <description>Read-only parameter with value of Maven property &lt;i&gt;project.build.directory&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of
configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to redirect the unit test standard output to a file (found in
reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &quot;brief&quot; or &quot;plain&quot;.
Only applies to the output format of the output files  (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml,
testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt.
File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos;
and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers)
The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after
they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &quot;flake&quot;.
However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &quot;false&quot;, a new VM is forked for each test class to be executed.
If set to &quot;true&quot;, up to {@code forkCount} VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are {@code alphabetical},
{@code reversealphabetical}, {@code random}, {@code hourly} (alphabetical on even hours, reverse alphabetical
on odd hours), {@code failedfirst}, {@code balanced} and {@code filesystem}.
&lt;br&gt;
&lt;br&gt;
Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a
multi-module build.
&lt;br&gt;
&lt;br&gt;
Failed first will run tests that failed on previous run first, as well as new tests for this run.
&lt;br&gt;
&lt;br&gt;
Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the
overall execution time. Initially a statistics file is created and every next test run will reorder classes.
&lt;br&gt;
&lt;br&gt;
Note that the statistics are stored in a file named &lt;b&gt;.surefire-XXXXXXXXX&lt;/b&gt; beside &lt;i&gt;pom.xml&lt;/i&gt; and
should not be checked into version control. The &quot;XXXXX&quot; is the SHA1 checksum of the entire surefire
configuration, so different configurations will have different statistics files, meaning if you change any
configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending &lt;i&gt;SIGTERM signal (CTRL+C)&lt;/i&gt;, &lt;i&gt;SHUTDOWN command&lt;/i&gt; is
received by every forked JVM.
&lt;br&gt;
By default ({@code shutdown=testset}) forked JVM would not continue with new test which means that
the current test may still continue to run.
&lt;br&gt;
The parameter can be configured with other two values {@code exit} and {@code kill}.
&lt;br&gt;
Using {@code exit} forked JVM executes {@code System.exit(1)} after the plugin process has received
&lt;i&gt;SIGTERM signal&lt;/i&gt;.
&lt;br&gt;
Using {@code kill} the JVM executes {@code Runtime.halt(1)} and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using
the &quot;maven.test.skip&quot; property, because maven.test.skip disables both running the tests and compiling the tests.
Consider using the {@code skipTests} parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests.
Due to race conditions in parallel/forked execution this may not be fully guaranteed.&lt;br&gt;
Enable with system property {@code -Dsurefire.skipAfterFailureCount=1} or any number greater than zero.
Defaults to &quot;0&quot;.&lt;br&gt;
See the prerequisites and limitations in documentation:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like {@code skipTests}, but bound to the old property &quot;maven.test.skip.exec&quot;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite
convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &amp;lt;suiteXmlFile&amp;gt; elements specifying TestNG suite xml file locations. Note that
{@code suiteXmlFiles} is incompatible with several other parameters of this plugin, like
{@code includes} and {@code excludes}.&lt;br&gt;
This parameter is ignored if the {@code test} parameter is specified (allowing you to run a single test
instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory containing internal Surefire temporary files.
&lt;br&gt;
The &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory is &lt;i&gt;project.build.directory&lt;/i&gt; on most platforms or
&lt;i&gt;system default temporary-directory&lt;/i&gt; specified by the system property {@code java.io.tmpdir}
on Windows (see &lt;a href=&quot;https://issues.apache.org/jira/browse/SUREFIRE-1400&quot;&gt;SUREFIRE-1400&lt;/a&gt;).
&lt;br&gt;
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter {@code includes} and
{@code excludes}. Each pattern you specify here will be used to create an include pattern formatted like
&lt;code&gt;**{@literal /}${test}.java&lt;/code&gt;, so you can just type {@code -Dtest=MyTest} to run a single test called
&quot;foo/MyTest.java&quot;. The test patterns prefixed with a &lt;em&gt;!&lt;/em&gt; will be excluded.
&lt;br&gt;
This parameter overrides the parameter {@code includes}, {@code excludes}, and the TestNG parameter
{@code suiteXmlFiles}.
&lt;br&gt;
Since 2.7.3, you can execute a limited number of methods in the test by adding &lt;i&gt;#myMethod&lt;/i&gt; or
&lt;i&gt;#my*ethod&lt;/i&gt;. For example, {@code -Dtest=MyTest#myMethod}. This is supported for junit 4.x and TestNg.&lt;br&gt;
&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=???Test, !Unstable*, pkg{@literal /}**{@literal /}Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&quot;&lt;/code&gt;&lt;/pre&gt;
or e.g.
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
The Parameterized JUnit runner {@code describes} test methods using an index in brackets, so the non-regex
method pattern would become: {@code #testMethod[*]}.
If using &lt;code&gt;@Parameters(name=&quot;{index}: fib({0})={1}&quot;)&lt;/code&gt; and selecting the index e.g. 5 in pattern, the
non-regex method pattern would become {@code #testMethod[5:*]}.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the
beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on
occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, {@code org.testng:testng} will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be
allocated for this execution. Only makes sense to use in conjunction with the {@code parallel} parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent classes if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited classes concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     2:&lt;b&gt;3&lt;/b&gt;:5, there is 30% of {@code threadCount} in concurrent classes.&lt;/li&gt;
 &lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=suitesAndClasses},
 {@code threadCount=16}, {@code threadCountSuites=5}, {@code threadCountClasses} is unspecified leaf, the number
 of concurrent classes is varying from &amp;gt;= 11 to 14 or 15. The {@code threadCountSuites} become
 given number of threads.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
&lt;ul&gt;
&lt;li&gt;number of concurrent methods if {@code threadCount} is 0 or unspecified&lt;/li&gt;
&lt;li&gt;limited concurrency of methods if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
concurrency is computed from ratio. For instance parallel=all and the ratio between
{@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is 2:3:&lt;b&gt;5&lt;/b&gt;,
there is 50% of {@code threadCount} which appears in concurrent methods.&lt;/li&gt;
&lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=all},
{@code threadCount=16}, {@code threadCountSuites=2}, {@code threadCountClasses=3}, but {@code threadCountMethods}
is unspecified leaf, the number of concurrent methods is varying from &amp;gt;= 11 to 14 or 15.
The {@code threadCountSuites} and {@code threadCountClasses} become given number of threads.&lt;/li&gt;
&lt;/ul&gt;
Only makes sense to use in conjunction with the {@code parallel} parameter. The default value &lt;b&gt;0&lt;/b&gt;
behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent suites if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited suites concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     &lt;b&gt;2&lt;/b&gt;:3:5, there is 20% of {@code threadCount} which appeared in concurrent suites.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>thread_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &quot;false&quot; to force it to
launch your tests with a plain old Java classpath. (See the
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&lt;/a&gt;
for a more detailed explanation of manifest-only JARs and their benefits.)
&lt;br&gt;
Beware, setting this to &quot;false&quot; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking.
Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s
ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The {@code parallel} parameter and
the actual number of classes/methods will decide. Setting this to &quot;true&quot; effectively disables
{@code perCoreThreadCount} and {@code threadCount}. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <commit_hash implementation="java.lang.String" default-value="0000F">${commit.hash}</commit_hash>
        <commit_serial implementation="java.lang.String" default-value="-1">${commit.serial}</commit_serial>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <debug_flag implementation="java.lang.String" default-value="false">${debug.flag}</debug_flag>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <fork_count implementation="java.lang.String" default-value="1">${fork.count}</fork_count>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository" default-value="${localRepository}"/>
        <log_directory implementation="java.lang.String" default-value="XXXX">${log.directory}</log_directory>
        <multi_module_project_name implementation="java.lang.String" default-value="XXX">${multimodule.projectname}</multi_module_project_name>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelMavenExecution implementation="java.lang.Boolean" default-value="${session.parallel}"/>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <pluginArtifactMap implementation="java.util.Map">${plugin.artifactMap}</pluginArtifactMap>
        <pluginDescriptor implementation="org.apache.maven.plugin.descriptor.PluginDescriptor" default-value="${plugin}"/>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <projectArtifactMap implementation="java.util.Map">${project.artifactMap}</projectArtifactMap>
        <projectBuildDir implementation="java.lang.String" default-value="${project.build.directory}"/>
        <projectBuildDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <thread_count implementation="java.lang.String" default-value="8">${thread.count}</thread_count>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
          <field-name>metadataSource</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>testrunner</goal>
      <description>Mojo to run TLDR A sample command to run this plugin would look like  - 

mvn -q com.mondego.ics.uci:testrunner-plugin:1.0.2-SNAPSHOT:tldr 
-Dcommit.serial=&lt;serial&gt;
-Dcommit.hash=&lt;hash&gt;
-Dlog.directory=&lt;log_dir&gt; 
-Ddebug.flag=&lt;true/false&gt;
-Dmultimodule.projectname=&lt;project name&gt;
-Dmaven.test.failure.ignore=true 
-Drat.skip=true</description>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>true</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executePhase>test</executePhase>
      <executeLifecycle>testrunner</executeLifecycle>
      <implementation>uci.ics.mondego.testrunner.plugin.TestRunnerMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the classpath.</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line.
&lt;br&gt;
&lt;br&gt;
Since the Version 2.17 using an alternate syntax for {@code argLine}, &lt;b&gt;@{...}&lt;/b&gt; allows late replacement
of properties when the plugin is executed, so properties that have been modified by other plugins will be picked
up correctly.
See the Frequently Asked Questions page with more details:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&lt;/a&gt;
&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&quot;&gt;
    http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via
System.getProperty(&quot;basedir&quot;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated
classloader. Only used when forking ({@code forkMode} is not {@code none}).&lt;br&gt;
Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the
Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test
classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath. Each dependency string must follow the format
&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath. The scope should be one of the scopes defined by
org.apache.maven.artifact.Artifact. This includes the following:
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;compile&lt;/i&gt; - system, provided, compile
&lt;li&gt;&lt;i&gt;runtime&lt;/i&gt; - compile, runtime
&lt;li&gt;&lt;i&gt;compile+runtime&lt;/i&gt; - system, provided, compile, runtime
&lt;li&gt;&lt;i&gt;runtime+system&lt;/i&gt; - system, compile, runtime
&lt;li&gt;&lt;i&gt;test&lt;/i&gt; - system, provided, compile, runtime, test
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>commit_hash</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Hash code of a commit. This is needed to generate report for each 
sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>commit_serial</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Serial number of a sampled commit. This is needed to generate
report for each sample commit iteratively in an experiment.</description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &quot;true&quot;, the process will suspend and wait for a debugger to attach
on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure
arbitrary debuggability options (without overwriting the other options specified through the {@code argLine}
parameter).</description>
        </parameter>
        <parameter>
          <name>debug_flag</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for debug print statements. For debugging purpose turn this flag ON.</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run.
The child elements of this element must be &amp;lt;dependency&amp;gt; elements, and the
contents of each of these elements must be a string which follows the format:

&lt;i&gt;groupId:artifactId&lt;/i&gt;. For example: &lt;i&gt;org.acme:project-a&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set
this flag to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Excluded groups. Any methods/classes/etc with one of the groups
specified in this list will specifically not be run.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider.&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;exclude&amp;gt; elements specifying the tests (by pattern) that should be excluded in testing. When not
specified and when the {@code test} parameter is not specified, the default excludes will be &lt;br&gt;
&lt;pre&gt;&lt;code&gt;
{@literal &lt;excludes&gt;}
    {@literal &lt;exclude&gt;}**{@literal /}*$*{@literal &lt;/exclude&gt;}
{@literal &lt;/excludes&gt;}
&lt;/code&gt;&lt;/pre&gt;
(which excludes all inner classes).
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.
&lt;br&gt;
Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;exclude&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;
{@literal &lt;exclude&gt;}%regex[pkg.*Slow.*.class], Unstable*{@literal &lt;/exclude&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property &lt;code&gt;${project.build.testOutputDirectory}&lt;/code&gt;, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If {@code excludes} are
also specified, these patterns are appended. Example with path, simple and regex excludes:&lt;br&gt;
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}DontRunTest.*
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>java.lang.Boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to
&quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>java.lang.Boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if there are no tests to run. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &quot;C&quot;,
the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with
&quot;C&quot;. If set to &quot;0&quot;, no VM is forked and all tests are executed within the main process.&lt;br&gt;
&lt;br&gt;
Example values: &quot;1.5C&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
The system properties and the {@code argLine} of the forked processes may contain the place holder string
&lt;code&gt;${surefire.forkNumber}&lt;/code&gt;, which is replaced with a fixed number for each of the parallel forks,
ranging from &lt;b&gt;1&lt;/b&gt; to the effective value of {@code forkCount} times the maximum number of parallel
Surefire executions in maven parallel builds, i.e. the effective value of the &lt;b&gt;-T&lt;/b&gt; command line
argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkMode</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;strong&gt;DEPRECATED&lt;/strong&gt; since version 2.14. Use {@code forkCount} and {@code reuseForks} instead.
&lt;br&gt;
&lt;br&gt;
Option to specify the forking mode. Can be {@code never}, {@code once}, {@code always}, {@code perthread}.&lt;br&gt;
The {@code none} and {@code pertest} are also accepted for backwards compatibility.&lt;br&gt;
The {@code always} forks for each test-class.&lt;br&gt;
The {@code perthread} creates the number of parallel forks specified by {@code threadCount}, where each forked
JVM is executing one test-class. See also the parameter {@code reuseForks} for the lifetime of JVM.</description>
        </parameter>
        <parameter>
          <name>fork_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed.
If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated
by {@code System.exit()}. Use this parameter in order to determine the timeout of terminating the process.
&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&quot;&gt;see the documentation:
http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&lt;/a&gt;
Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never
timing out.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only) Groups for this test. Only classes/methods/etc decorated with one
of the groups specified here will be included in test run, if specified.&lt;br&gt;
For JUnit, this parameter forces the use of the 4.7 provider&lt;br&gt;
This parameter is ignored if the {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
Since version 2.18.1 and JUnit 4.12, the {@code @Category} annotation type is automatically inherited from
superclasses, see {@code @java.lang.annotation.Inherited}. Make sure that test class inheritance still makes
sense together with {@code @Category} annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;include&amp;gt; elements specifying the tests (by pattern) that should be included in testing. When not
specified and when the {@code test} parameter is not specified, the default includes will be
&lt;pre&gt;&lt;code&gt;
{@literal &lt;includes&gt;}
    {@literal &lt;include&gt;}**{@literal /}Test*.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Test.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*Tests.java{@literal &lt;/include&gt;}
    {@literal &lt;include&gt;}**{@literal /}*TestCase.java{@literal &lt;/include&gt;}
{@literal &lt;/includes&gt;}
&lt;/code&gt;&lt;/pre&gt;
Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple
&amp;nbsp;&amp;lt;include&amp;gt; entries.&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], Basic????, !Unstable*{@literal &lt;/include&gt;}
{@literal &lt;include&gt;}%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg{@literal /}**{@literal /}*Fast*.java{@literal &lt;/include&gt;}
&lt;br&gt;
This parameter is ignored if the TestNG {@code suiteXmlFiles} parameter is specified.&lt;br&gt;
&lt;br&gt;
&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project
being tested. This directory is declared by the parameter {@code testClassesDirectory} which defaults
to the POM property {@code ${project.build.testOutputDirectory}}, typically
&lt;code&gt;{@literal src/test/java}&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If {@code includes} are
also specified, these patterns are appended. Example with path, simple and regex includes:
&lt;pre&gt;&lt;code&gt;
*{@literal /}test{@literal /}*
**{@literal /}NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, {@code junit:junit} will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the
jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from
MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>localRepository</name>
          <type>org.apache.maven.artifact.repository.ArtifactRepository</type>
          <required>true</required>
          <editable>false</editable>
          <description>ArtifactRepository of the localRepository. To obtain the directory of localRepository in unit tests use
System.getProperty(&quot;localRepository&quot;).</description>
        </parameter>
        <parameter>
          <name>log_directory</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to write Logs to a particular directory.</description>
        </parameter>
        <parameter>
          <name>multi_module_project_name</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the project. This is needed particularly for multi module projects as it is difficult to
figure out which project is the parent project.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter {@code parallel}, TestNG will try to run all your test methods
in separate threads, except for methods that depend on each other, which will be run in the same thread in order
to respect their order of execution.
&lt;br&gt;
(JUnit 4.7 provider) Supports values {@code classes}, {@code methods}, {@code both} to run
in separate threads been controlled by {@code threadCount}.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), the value {@code both} is &lt;strong&gt;DEPRECATED&lt;/strong&gt;.
Use {@code classesAndMethods} instead.
&lt;br&gt;
&lt;br&gt;
Since version 2.16 (JUnit 4.7 provider), additional vales are available:
&lt;br&gt;
{@code suites}, {@code suitesAndClasses}, {@code suitesAndMethods}, {@code classesAndMethods}, {@code all}.</description>
        </parameter>
        <parameter>
          <name>parallelMavenExecution</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and
average number of methods per class if set to &lt;strong&gt;true&lt;/strong&gt;.
&lt;br&gt;
True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests
and {@code interrupt} currently running tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds.
&lt;br&gt;
Example values: &quot;3.5&quot;, &quot;4&quot;&lt;br&gt;
&lt;br&gt;
If set to 0, wait forever, never timing out.
Makes sense with specified {@code parallel} different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods
are per cpu core.</description>
        </parameter>
        <parameter>
          <name>pluginArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of plugin artifacts.</description>
        </parameter>
        <parameter>
          <name>pluginDescriptor</name>
          <type>org.apache.maven.plugin.descriptor.PluginDescriptor</type>
          <since>2.12</since>
          <required>false</required>
          <editable>false</editable>
          <description>Information about this plugin, mainly used to lookup this plugin&apos;s configuration from the currently executing
project.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>projectArtifactMap</name>
          <type>java.util.Map</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of project artifacts.</description>
        </parameter>
        <parameter>
          <name>projectBuildDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Build directory of the project upon which the plugin is invoked</description>
        </parameter>
        <parameter>
          <name>projectBuildDirectory</name>
          <type>java.io.File</type>
          <since>2.20</since>
          <required>false</required>
          <editable>false</editable>
          <description>Read-only parameter with value of Maven property &lt;i&gt;project.build.directory&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring all TestNG related configurations. This is the new preferred method of
configuring TestNG.</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to redirect the unit test standard output to a file (found in
reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>remoteRepositories</name>
          <type>java.util.List</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The remote plugin repositories declared in the POM.</description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &quot;brief&quot; or &quot;plain&quot;.
Only applies to the output format of the output files  (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml,
testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt.
File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos;
and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers)
The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after
they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &quot;flake&quot;.
However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &quot;false&quot;, a new VM is forked for each test class to be executed.
If set to &quot;true&quot;, up to {@code forkCount} VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are {@code alphabetical},
{@code reversealphabetical}, {@code random}, {@code hourly} (alphabetical on even hours, reverse alphabetical
on odd hours), {@code failedfirst}, {@code balanced} and {@code filesystem}.
&lt;br&gt;
&lt;br&gt;
Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a
multi-module build.
&lt;br&gt;
&lt;br&gt;
Failed first will run tests that failed on previous run first, as well as new tests for this run.
&lt;br&gt;
&lt;br&gt;
Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the
overall execution time. Initially a statistics file is created and every next test run will reorder classes.
&lt;br&gt;
&lt;br&gt;
Note that the statistics are stored in a file named &lt;b&gt;.surefire-XXXXXXXXX&lt;/b&gt; beside &lt;i&gt;pom.xml&lt;/i&gt; and
should not be checked into version control. The &quot;XXXXX&quot; is the SHA1 checksum of the entire surefire
configuration, so different configurations will have different statistics files, meaning if you change any
configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending &lt;i&gt;SIGTERM signal (CTRL+C)&lt;/i&gt;, &lt;i&gt;SHUTDOWN command&lt;/i&gt; is
received by every forked JVM.
&lt;br&gt;
By default ({@code shutdown=testset}) forked JVM would not continue with new test which means that
the current test may still continue to run.
&lt;br&gt;
The parameter can be configured with other two values {@code exit} and {@code kill}.
&lt;br&gt;
Using {@code exit} forked JVM executes {@code System.exit(1)} after the plugin process has received
&lt;i&gt;SIGTERM signal&lt;/i&gt;.
&lt;br&gt;
Using {@code kill} the JVM executes {@code Runtime.halt(1)} and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using
the &quot;maven.test.skip&quot; property, because maven.test.skip disables both running the tests and compiling the tests.
Consider using the {@code skipTests} parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests.
Due to race conditions in parallel/forked execution this may not be fully guaranteed.&lt;br&gt;
Enable with system property {@code -Dsurefire.skipAfterFailureCount=1} or any number greater than zero.
Defaults to &quot;0&quot;.&lt;br&gt;
See the prerequisites and limitations in documentation:&lt;br&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like {@code skipTests}, but bound to the old property &quot;maven.test.skip.exec&quot;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite
convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &amp;lt;suiteXmlFile&amp;gt; elements specifying TestNG suite xml file locations. Note that
{@code suiteXmlFiles} is incompatible with several other parameters of this plugin, like
{@code includes} and {@code excludes}.&lt;br&gt;
This parameter is ignored if the {@code test} parameter is specified (allowing you to run a single test
instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use systemPropertyVariables instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <since>2.8.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties, loaded from a file, to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to the JUnit tests.</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory containing internal Surefire temporary files.
&lt;br&gt;
The &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory is &lt;i&gt;project.build.directory&lt;/i&gt; on most platforms or
&lt;i&gt;system default temporary-directory&lt;/i&gt; specified by the system property {@code java.io.tmpdir}
on Windows (see &lt;a href=&quot;https://issues.apache.org/jira/browse/SUREFIRE-1400&quot;&gt;SUREFIRE-1400&lt;/a&gt;).
&lt;br&gt;
It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter {@code includes} and
{@code excludes}. Each pattern you specify here will be used to create an include pattern formatted like
&lt;code&gt;**{@literal /}${test}.java&lt;/code&gt;, so you can just type {@code -Dtest=MyTest} to run a single test called
&quot;foo/MyTest.java&quot;. The test patterns prefixed with a &lt;em&gt;!&lt;/em&gt; will be excluded.
&lt;br&gt;
This parameter overrides the parameter {@code includes}, {@code excludes}, and the TestNG parameter
{@code suiteXmlFiles}.
&lt;br&gt;
Since 2.7.3, you can execute a limited number of methods in the test by adding &lt;i&gt;#myMethod&lt;/i&gt; or
&lt;i&gt;#my*ethod&lt;/i&gt;. For example, {@code -Dtest=MyTest#myMethod}. This is supported for junit 4.x and TestNg.&lt;br&gt;
&lt;br&gt;
Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG):
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=???Test, !Unstable*, pkg{@literal /}**{@literal /}Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&quot;&lt;/code&gt;&lt;/pre&gt;
or e.g.
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
The Parameterized JUnit runner {@code describes} test methods using an index in brackets, so the non-regex
method pattern would become: {@code #testMethod[*]}.
If using &lt;code&gt;@Parameters(name=&quot;{index}: fib({0})={1}&quot;)&lt;/code&gt; and selecting the index e.g. 5 in pattern, the
non-regex method pattern would become {@code #testMethod[5:*]}.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the
beginning of the test classpath. *</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on
occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, {@code org.testng:testng} will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>true</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be
allocated for this execution. Only makes sense to use in conjunction with the {@code parallel} parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent classes if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited classes concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     2:&lt;b&gt;3&lt;/b&gt;:5, there is 30% of {@code threadCount} in concurrent classes.&lt;/li&gt;
 &lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=suitesAndClasses},
 {@code threadCount=16}, {@code threadCountSuites=5}, {@code threadCountClasses} is unspecified leaf, the number
 of concurrent classes is varying from &amp;gt;= 11 to 14 or 15. The {@code threadCountSuites} become
 given number of threads.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.:
&lt;ul&gt;
&lt;li&gt;number of concurrent methods if {@code threadCount} is 0 or unspecified&lt;/li&gt;
&lt;li&gt;limited concurrency of methods if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
concurrency is computed from ratio. For instance parallel=all and the ratio between
{@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is 2:3:&lt;b&gt;5&lt;/b&gt;,
there is 50% of {@code threadCount} which appears in concurrent methods.&lt;/li&gt;
&lt;li&gt;as in the previous case but without this leaf thread-count. Example: {@code parallel=all},
{@code threadCount=16}, {@code threadCountSuites=2}, {@code threadCountClasses=3}, but {@code threadCountMethods}
is unspecified leaf, the number of concurrent methods is varying from &amp;gt;= 11 to 14 or 15.
The {@code threadCountSuites} and {@code threadCountClasses} become given number of threads.&lt;/li&gt;
&lt;/ul&gt;
Only makes sense to use in conjunction with the {@code parallel} parameter. The default value &lt;b&gt;0&lt;/b&gt;
behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.:
&lt;ul&gt;
 &lt;li&gt;number of concurrent suites if {@code threadCount} is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited suites concurrency if {@code useUnlimitedThreads} is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if {@code threadCount} and certain thread-count parameters are &amp;gt; 0 for {@code parallel}, the
 concurrency is computed from ratio. For instance {@code parallel=all} and the ratio between
     {@code threadCountSuites}:{@code threadCountClasses}:{@code threadCountMethods} is
     &lt;b&gt;2&lt;/b&gt;:3:5, there is 20% of {@code threadCount} which appeared in concurrent suites.&lt;/li&gt;
&lt;/ul&gt;

Only makes sense to use in conjunction with the {@code parallel} parameter.
The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>thread_count</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional flag to for the number of threads in each pool. Default value is 8.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &quot;false&quot; to force it to
launch your tests with a plain old Java classpath. (See the
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&quot;&gt;
    http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&lt;/a&gt;
for a more detailed explanation of manifest-only JARs and their benefits.)
&lt;br&gt;
Beware, setting this to &quot;false&quot; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking.
Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s
ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The {@code parallel} parameter and
the actual number of classes/methods will decide. Setting this to &quot;true&quot; effectively disables
{@code perCoreThreadCount} and {@code threadCount}. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <commit_hash implementation="java.lang.String" default-value="0000F">${commit.hash}</commit_hash>
        <commit_serial implementation="java.lang.String" default-value="-1">${commit.serial}</commit_serial>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <debug_flag implementation="java.lang.String" default-value="false">${debug.flag}</debug_flag>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <disableXmlReport implementation="boolean" default-value="false">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="java.lang.Boolean">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="java.lang.Boolean">${failIfNoTests}</failIfNoTests>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkMode implementation="java.lang.String" default-value="once">${forkMode}</forkMode>
        <fork_count implementation="java.lang.String" default-value="1">${fork.count}</fork_count>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <groups implementation="java.lang.String">${groups}</groups>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <localRepository implementation="org.apache.maven.artifact.repository.ArtifactRepository" default-value="${localRepository}"/>
        <log_directory implementation="java.lang.String" default-value="XXXX">${log.directory}</log_directory>
        <multi_module_project_name implementation="java.lang.String" default-value="XXX">${multimodule.projectname}</multi_module_project_name>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelMavenExecution implementation="java.lang.Boolean" default-value="${session.parallel}"/>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <pluginArtifactMap implementation="java.util.Map">${plugin.artifactMap}</pluginArtifactMap>
        <pluginDescriptor implementation="org.apache.maven.plugin.descriptor.PluginDescriptor" default-value="${plugin}"/>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <projectArtifactMap implementation="java.util.Map">${project.artifactMap}</projectArtifactMap>
        <projectBuildDir implementation="java.lang.String" default-value="${project.build.directory}"/>
        <projectBuildDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <remoteRepositories implementation="java.util.List" default-value="${project.pluginArtifactRepositories}"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <shutdown implementation="java.lang.String" default-value="testset">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <thread_count implementation="java.lang.String" default-value="8">${thread.count}</thread_count>
        <trimStackTrace implementation="boolean" default-value="true">${trimStackTrace}</trimStackTrace>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>
          <field-name>artifactFactory</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.metadata.ArtifactMetadataSource</role>
          <field-name>metadataSource</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>com.mondego.ics.uci</groupId>
      <artifactId>testrunner-core</artifactId>
      <type>jar</type>
      <version>1.0.2-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <type>jar</type>
      <version>19.0</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-core</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings-builder</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-repository-metadata</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model-builder</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-aether-provider</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-spi</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-impl</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-api</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.aether</groupId>
      <artifactId>aether-util</artifactId>
      <type>jar</type>
      <version>1.11</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-plexus</artifactId>
      <type>jar</type>
      <version>2.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-bean</artifactId>
      <type>jar</type>
      <version>2.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guice</artifactId>
      <type>jar</type>
      <version>2.9.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.14</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-classworlds</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-component-annotations</artifactId>
      <type>jar</type>
      <version>1.5.5</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-sec-dispatcher</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.plexus</groupId>
      <artifactId>plexus-cipher</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <type>jar</type>
      <version>1.2.17</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact</artifactId>
      <type>jar</type>
      <version>2.0.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <type>jar</type>
      <version>2.0.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-profile</artifactId>
      <type>jar</type>
      <version>2.0.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-artifact-manager</artifactId>
      <type>jar</type>
      <version>2.0.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>1.0-beta-2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-registry</artifactId>
      <type>jar</type>
      <version>2.0.9</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-9-stable-1</version>
    </dependency>
    <dependency>
      <groupId>classworlds</groupId>
      <artifactId>classworlds</artifactId>
      <type>jar</type>
      <version>1.1-alpha-2</version>
    </dependency>
    <dependency>
      <groupId>org.specs2</groupId>
      <artifactId>classycle</artifactId>
      <type>jar</type>
      <version>1.4.3</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.0.8</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <type>maven-plugin</type>
      <version>2.20.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>maven-surefire-common</artifactId>
      <type>jar</type>
      <version>2.20.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-api</artifactId>
      <type>jar</type>
      <version>2.20.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-logger-api</artifactId>
      <type>jar</type>
      <version>2.20.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-booter</artifactId>
      <type>jar</type>
      <version>2.20.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-descriptor</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-toolchain</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugin-testing</groupId>
      <artifactId>maven-plugin-testing-tools</artifactId>
      <type>jar</type>
      <version>3.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-invoker</artifactId>
      <type>jar</type>
      <version>2.0.11</version>
    </dependency>
  </dependencies>
</plugin>